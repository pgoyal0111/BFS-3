/**
Time O(n)
Space O(1) (queue will contain atmost 4 nodes and set will contain atmost 2 elements)
Leetcode yes
problem no

We do the normal bfs traversal. During traversal if any of the node matches x or y value, we add that nodes parent's value to 
hashset. When all the nodes of a level have been traversed, we check the size of hashset. If it is one, it means either 
we found only one of x or y value at that level OR we found both x and y but they both had same parent, hence we return true.
If set size is 2 , that means both we found both x and y at this level and they have different parent
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        
        if(root == null)
            return false;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        Set<Integer> set = new HashSet<>();
       
        while(q.size()!=0)
        {
            
            int size = q.size();
           
            for(int i =0 ;i < size; i++)
            {   
                TreeNode temp = q.poll();
                
                if(temp.left!=null)
                {
                    q.add(temp.left);
                    if(temp.left.val == x || temp.left.val == y)
                        set.add(temp.val);
                    
                }   
                if(temp.right!=null)
                {
                    q.add(temp.right);
                    if(temp.right.val == x || temp.right.val == y)
                        set.add(temp.val);
                }
                                
            }
           
            if(set.size() == 1)
                return false;   
        }
        
        return true;
        
    }
}
